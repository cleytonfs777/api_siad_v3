services:

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data  # ✅ Evita perda de dados ao reiniciar o container
    networks:
      - app_network
    healthcheck:  # ✅ Garante que o Redis esteja pronto antes de iniciar os outros serviços
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5

  app:
    build: ./app
    container_name: fastapi_app
    restart: always
    depends_on:
      redis:
        condition: service_healthy  # ✅ Aguarda o Redis estar pronto
    ports:
      - "8000:8000"
    env_file:
      - .env  # ✅ Carregar as variáveis do .env
    environment:
      - REDIS_HOST=redis  # ✅ Define o host do Redis
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    depends_on:
      - app  # ✅ Aguarda o FastAPI estar pronto antes de iniciar o Nginx
    networks:
      - app_network

networks:
  app_network:  # ✅ Garante que todos os containers se comuniquem
    driver: bridge

volumes:
  redis_data:  # ✅ Volume para persistência do Redis
